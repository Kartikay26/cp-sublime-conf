import solution

sol1 = solution.solution([
            [0, 2, 2, 2, -1],
            [9, 0, 2, 2, -1],
            [9, 3, 0, 2, -1],
            [9, 3, 2, 0, -1],
            [9, 3, 2, 2,  0]
          ], 1)

assert(sol1 == [1, 2])

print("Passed first!")

sol2 = solution.solution([
            [0, 1, 1, 1, 1],
            [1, 0, 1, 1, 1], 
            [1, 1, 0, 1, 1],
            [1, 1, 1, 0, 1],
            [1, 1, 1, 1, 0]
          ], 3)

assert(sol2 == [0, 1])

print("Passed second!")

i = 0

def test(g, T, soln):
    global i
    i += 1
    sol = solution.solution(g, T)
    if sol == soln:
        print("Passed test case #%d."%i)
    else:
        print("FAILED test case #%d! ***"%i, sol, soln)




## ===================================================

# 1

test([[0,  1,  5,  5,  2],
      [10, 0,  2,  6,  10],
      [10, 10, 0,  1,  5],
      [10, 10, 10, 0,  1],
      [10, 10, 10, 10, 0]], 5, [0, 1, 2])

# 2

test([[0, 1, 3, 4, 2],
      [10, 0, 2, 3, 4],
      [10, 10, 0, 1, 2],
      [10, 10, 10, 0, 1],
      [10, 10, 10, 10, 0]], 4, [])

# 3

test([[0, 2, 2, 2, -1],
      [9, 0, 2, 2, -1],
      [9, 3, 0, 2, -1],
      [9, 3, 2, 0, -1],
      [9, 3, 2, 2, 0]], 1, [1, 2])

# 4

test([[0,  1, 10, 10, 10],
      [10, 0,  1,  1,  2],
      [10, 1,  0, 10, 10],
      [10, 1,  10, 0, 10],
      [10, 10, 10, 10, 0]], 7, [0, 1, 2])

# 5

test([[0, 1, 1, 1, 1],
      [1, 0, 1, 1, 1],
      [1, 1, 0, 1, 1],
      [1, 1, 1, 0, 1],
      [1, 1, 1, 1, 0]], 3, [0, 1])

# 6

test([[0, 5, 11, 11, 1],
      [10, 0, 1, 5, 1],
      [10, 1, 0, 4, 0],
      [10, 1, 5, 0, 1],
      [10, 10, 10, 10, 0]], 10, [0, 1])

# 7

test([[0, 20, 20, 20, -1],
      [90, 0, 20, 20, 0],
      [90, 30, 0, 20, 0],
      [90, 30, 20, 0, 0],
      [-1, 30, 20, 20, 0]], 0, [0, 1, 2])

# 8

test([[0, 10, 10, 10, 1],
      [0, 0, 10, 10, 10],
      [0, 10, 0, 10, 10],
      [0, 10, 10, 0, 10],
      [1, 1, 1, 1, 0]], 5, [0, 1])

# 9

test([[2, 2],
      [2, 2]], 5, [])

# 10

test([[0, 10, 10, 1, 10],
      [10, 0, 10, 10, 1],
      [10, 1, 0, 10, 10],
      [10, 10, 1, 0, 10],
      [1, 10, 10, 10, 0]], 6, [0, 1, 2])

# 11

test([[1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1]], 1, [])

# 12

test([[0, 0, 1, 1, 1],
      [0, 0, 0, 1, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0]], 0, [0, 1, 2])

# 13

test([[1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1]], 1, [0, 1, 2])

# 14

test([[0, 1, 5, 5, 5, 5],
      [5, 0, 1, 5, 5, 5],
      [5, 5, 0, 5, 5, -1],
      [5, 5, 1, 0, 5, 5],
      [5, 5, 1, 5, 0, 5],
      [5, 5, 1, 1, 1, 0]]
      , 3, [0, 1, 2, 3])

# 15

test([[0, 1, 5, 5, 5, 5, 5],
      [5, 0, 1, 5, 5, 5, 5],
      [5, 5, 0, 5, 5, 0, -1],
      [5, 5, 1, 0, 5, 5, 5],
      [5, 5, 1, 5, 0, 5, 5],
      [5, 5, 0, 5, 5, 0, 0],
      [5, 5, 1, 1, 1, 0, 0]]
      , 3, [0, 1, 2, 3, 4])

# 16

test([[0,-1, 0, 9, 9, 9, 9, 9],  # Start
      [9, 0, 1, 9, 9, 9, 9, 9],  # 0
      [0, 9, 0, 0, 9, 9, 1, 1],  # 1
      [9, 9, 9, 0, 1, 9, 9, 9],  # 2
      [9, 9, 9, 9, 0,-1, 9, 9],  # 3
      [9, 9, 0, 9, 9, 0, 9, 9],  # 4
      [9, 9,-1, 9, 9, 9, 0, 9],  # 5
      [9, 9, 9, 9, 9, 9, 9, 0]], # bulkhead
      1, [0, 1, 2, 3, 4, 5])

# 17

test([[0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0]], 0, [0, 1, 2])

# 18

test([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])

# 19

test([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],
      5, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])

