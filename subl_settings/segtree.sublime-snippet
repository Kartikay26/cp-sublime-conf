<snippet>
	<content><![CDATA[
struct Node {
	int x;
	Node (){
		// empty node
		x = 0;
	}
	void update(int v){
		// update query on single node
		x = v;
	}
	Node operator+ (Node &o){
		// unite with other node
		Node n;
		n.x = x + o.x;
		return n;
	}
};

template<typename Node, typename V>
struct SegTree_PuRq {
	vector<Node> tree;
	// 1 = root, l & r child = 2i, 2i+1, leaves = [n, 2n+1]
	int n;
	SegTree_PuRq(vector<V> data){
		assert(data.size() > 0);
		for (n = 1; n < data.size(); n <<= 1);
		tree.resize(2 * n + 1);
		for (int i = 0; i < data.size(); ++i) {
			update(i, data[i]);
		}
	}
	Node query(int l, int r){
		l += n; r += n;
		Node n;
		while (l <= r){
			if (l%2 == 1) {n = n + tree[l++];}
			if (r%2 == 0) {n = n + tree[r--];}
			l /= 2; r /= 2;
		}
		return n;
	}
	void update(int p, V v){
		p += n;
		tree[p].update(v);
		for (p = p/2; p >= 1; p /= 2) {
			tree[p] = tree[2*p] + tree[2*p+1];
		}
	}
};
$0
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
